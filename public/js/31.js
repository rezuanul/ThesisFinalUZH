(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[31],{

/***/ "./node_modules/@walletconnect/modal-core/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/modal-core/dist/index.js ***!
  \**************************************************************/
/*! exports provided: ConfigCtrl, CoreUtil, EventsCtrl, ExplorerCtrl, ModalCtrl, OptionsCtrl, RouterCtrl, ThemeCtrl, ToastCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfigCtrl\", function() { return y; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CoreUtil\", function() { return a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventsCtrl\", function() { return R; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ExplorerCtrl\", function() { return te; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ModalCtrl\", function() { return se; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OptionsCtrl\", function() { return p; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterCtrl\", function() { return T; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ThemeCtrl\", function() { return ne; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ToastCtrl\", function() { return oe; });\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! valtio/vanilla */ \"./node_modules/valtio/vanilla.js\");\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__);\n\nconst o = Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"proxy\"])({\n    history: [\"ConnectWallet\"],\n    view: \"ConnectWallet\",\n    data: void 0\n  }),\n  T = {\n    state: o,\n    subscribe(e) {\n      return Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"subscribe\"])(o, () => e(o));\n    },\n    push(e, t) {\n      e !== o.view && (o.view = e, t && (o.data = t), o.history.push(e));\n    },\n    reset(e) {\n      o.view = e, o.history = [e];\n    },\n    replace(e) {\n      o.history.length > 1 && (o.history[o.history.length - 1] = e, o.view = e);\n    },\n    goBack() {\n      if (o.history.length > 1) {\n        o.history.pop();\n        const [e] = o.history.slice(-1);\n        o.view = e;\n      }\n    },\n    setData(e) {\n      o.data = e;\n    }\n  },\n  a = {\n    WALLETCONNECT_DEEPLINK_CHOICE: \"WALLETCONNECT_DEEPLINK_CHOICE\",\n    WCM_VERSION: \"WCM_VERSION\",\n    RECOMMENDED_WALLET_AMOUNT: 9,\n    isMobile() {\n      return typeof window < \"u\" ? Boolean(window.matchMedia(\"(pointer:coarse)\").matches || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)) : !1;\n    },\n    isAndroid() {\n      return a.isMobile() && navigator.userAgent.toLowerCase().includes(\"android\");\n    },\n    isIos() {\n      const e = navigator.userAgent.toLowerCase();\n      return a.isMobile() && (e.includes(\"iphone\") || e.includes(\"ipad\"));\n    },\n    isHttpUrl(e) {\n      return e.startsWith(\"http://\") || e.startsWith(\"https://\");\n    },\n    isArray(e) {\n      return Array.isArray(e) && e.length > 0;\n    },\n    formatNativeUrl(e, t, s) {\n      if (a.isHttpUrl(e)) return this.formatUniversalUrl(e, t, s);\n      let n = e;\n      n.includes(\"://\") || (n = e.replaceAll(\"/\", \"\").replaceAll(\":\", \"\"), n = `${n}://`), n.endsWith(\"/\") || (n = `${n}/`), this.setWalletConnectDeepLink(n, s);\n      const i = encodeURIComponent(t);\n      return `${n}wc?uri=${i}`;\n    },\n    formatUniversalUrl(e, t, s) {\n      if (!a.isHttpUrl(e)) return this.formatNativeUrl(e, t, s);\n      let n = e;\n      n.endsWith(\"/\") || (n = `${n}/`), this.setWalletConnectDeepLink(n, s);\n      const i = encodeURIComponent(t);\n      return `${n}wc?uri=${i}`;\n    },\n    async wait(e) {\n      return new Promise(t => {\n        setTimeout(t, e);\n      });\n    },\n    openHref(e, t) {\n      window.open(e, t, \"noreferrer noopener\");\n    },\n    setWalletConnectDeepLink(e, t) {\n      try {\n        localStorage.setItem(a.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({\n          href: e,\n          name: t\n        }));\n      } catch {\n        console.info(\"Unable to set WalletConnect deep link\");\n      }\n    },\n    setWalletConnectAndroidDeepLink(e) {\n      try {\n        const [t] = e.split(\"?\");\n        localStorage.setItem(a.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({\n          href: t,\n          name: \"Android\"\n        }));\n      } catch {\n        console.info(\"Unable to set WalletConnect android deep link\");\n      }\n    },\n    removeWalletConnectDeepLink() {\n      try {\n        localStorage.removeItem(a.WALLETCONNECT_DEEPLINK_CHOICE);\n      } catch {\n        console.info(\"Unable to remove WalletConnect deep link\");\n      }\n    },\n    setModalVersionInStorage() {\n      try {\n        typeof localStorage < \"u\" && localStorage.setItem(a.WCM_VERSION, \"2.6.2\");\n      } catch {\n        console.info(\"Unable to set Web3Modal version in storage\");\n      }\n    },\n    getWalletRouterData() {\n      var e;\n      const t = (e = T.state.data) == null ? void 0 : e.Wallet;\n      if (!t) throw new Error('Missing \"Wallet\" view data');\n      return t;\n    }\n  },\n  _ = typeof location < \"u\" && (location.hostname.includes(\"localhost\") || location.protocol.includes(\"https\")),\n  r = Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"proxy\"])({\n    enabled: _,\n    userSessionId: \"\",\n    events: [],\n    connectedWalletId: void 0\n  }),\n  R = {\n    state: r,\n    subscribe(e) {\n      return Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"subscribe\"])(r.events, () => e(Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"snapshot\"])(r.events[r.events.length - 1])));\n    },\n    initialize() {\n      r.enabled && typeof (crypto == null ? void 0 : crypto.randomUUID) < \"u\" && (r.userSessionId = crypto.randomUUID());\n    },\n    setConnectedWalletId(e) {\n      r.connectedWalletId = e;\n    },\n    click(e) {\n      if (r.enabled) {\n        const t = {\n          type: \"CLICK\",\n          name: e.name,\n          userSessionId: r.userSessionId,\n          timestamp: Date.now(),\n          data: e\n        };\n        r.events.push(t);\n      }\n    },\n    track(e) {\n      if (r.enabled) {\n        const t = {\n          type: \"TRACK\",\n          name: e.name,\n          userSessionId: r.userSessionId,\n          timestamp: Date.now(),\n          data: e\n        };\n        r.events.push(t);\n      }\n    },\n    view(e) {\n      if (r.enabled) {\n        const t = {\n          type: \"VIEW\",\n          name: e.name,\n          userSessionId: r.userSessionId,\n          timestamp: Date.now(),\n          data: e\n        };\n        r.events.push(t);\n      }\n    }\n  },\n  c = Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"proxy\"])({\n    chains: void 0,\n    walletConnectUri: void 0,\n    isAuth: !1,\n    isCustomDesktop: !1,\n    isCustomMobile: !1,\n    isDataLoaded: !1,\n    isUiLoaded: !1\n  }),\n  p = {\n    state: c,\n    subscribe(e) {\n      return Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"subscribe\"])(c, () => e(c));\n    },\n    setChains(e) {\n      c.chains = e;\n    },\n    setWalletConnectUri(e) {\n      c.walletConnectUri = e;\n    },\n    setIsCustomDesktop(e) {\n      c.isCustomDesktop = e;\n    },\n    setIsCustomMobile(e) {\n      c.isCustomMobile = e;\n    },\n    setIsDataLoaded(e) {\n      c.isDataLoaded = e;\n    },\n    setIsUiLoaded(e) {\n      c.isUiLoaded = e;\n    },\n    setIsAuth(e) {\n      c.isAuth = e;\n    }\n  },\n  W = Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"proxy\"])({\n    projectId: \"\",\n    mobileWallets: void 0,\n    desktopWallets: void 0,\n    walletImages: void 0,\n    chains: void 0,\n    enableAuthMode: !1,\n    enableExplorer: !0,\n    explorerExcludedWalletIds: void 0,\n    explorerRecommendedWalletIds: void 0,\n    termsOfServiceUrl: void 0,\n    privacyPolicyUrl: void 0\n  }),\n  y = {\n    state: W,\n    subscribe(e) {\n      return Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"subscribe\"])(W, () => e(W));\n    },\n    setConfig(e) {\n      var t, s;\n      R.initialize(), p.setChains(e.chains), p.setIsAuth(Boolean(e.enableAuthMode)), p.setIsCustomMobile(Boolean((t = e.mobileWallets) == null ? void 0 : t.length)), p.setIsCustomDesktop(Boolean((s = e.desktopWallets) == null ? void 0 : s.length)), a.setModalVersionInStorage(), Object.assign(W, e);\n    }\n  };\nvar V = Object.defineProperty,\n  D = Object.getOwnPropertySymbols,\n  H = Object.prototype.hasOwnProperty,\n  B = Object.prototype.propertyIsEnumerable,\n  M = (e, t, s) => t in e ? V(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: s\n  }) : e[t] = s,\n  K = (e, t) => {\n    for (var s in t || (t = {})) H.call(t, s) && M(e, s, t[s]);\n    if (D) for (var s of D(t)) B.call(t, s) && M(e, s, t[s]);\n    return e;\n  };\nconst L = \"https://explorer-api.walletconnect.com\",\n  E = \"wcm\",\n  O = \"js-2.6.2\";\nasync function w(e, t) {\n  const s = K({\n      sdkType: E,\n      sdkVersion: O\n    }, t),\n    n = new URL(e, L);\n  return n.searchParams.append(\"projectId\", y.state.projectId), Object.entries(s).forEach(([i, l]) => {\n    l && n.searchParams.append(i, String(l));\n  }), (await fetch(n)).json();\n}\nconst m = {\n  async getDesktopListings(e) {\n    return w(\"/w3m/v1/getDesktopListings\", e);\n  },\n  async getMobileListings(e) {\n    return w(\"/w3m/v1/getMobileListings\", e);\n  },\n  async getInjectedListings(e) {\n    return w(\"/w3m/v1/getInjectedListings\", e);\n  },\n  async getAllListings(e) {\n    return w(\"/w3m/v1/getAllListings\", e);\n  },\n  getWalletImageUrl(e) {\n    return `${L}/w3m/v1/getWalletImage/${e}?projectId=${y.state.projectId}&sdkType=${E}&sdkVersion=${O}`;\n  },\n  getAssetImageUrl(e) {\n    return `${L}/w3m/v1/getAssetImage/${e}?projectId=${y.state.projectId}&sdkType=${E}&sdkVersion=${O}`;\n  }\n};\nvar z = Object.defineProperty,\n  j = Object.getOwnPropertySymbols,\n  J = Object.prototype.hasOwnProperty,\n  q = Object.prototype.propertyIsEnumerable,\n  k = (e, t, s) => t in e ? z(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: s\n  }) : e[t] = s,\n  F = (e, t) => {\n    for (var s in t || (t = {})) J.call(t, s) && k(e, s, t[s]);\n    if (j) for (var s of j(t)) q.call(t, s) && k(e, s, t[s]);\n    return e;\n  };\nconst N = a.isMobile(),\n  d = Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"proxy\"])({\n    wallets: {\n      listings: [],\n      total: 0,\n      page: 1\n    },\n    search: {\n      listings: [],\n      total: 0,\n      page: 1\n    },\n    recomendedWallets: []\n  }),\n  te = {\n    state: d,\n    async getRecomendedWallets() {\n      const {\n        explorerRecommendedWalletIds: e,\n        explorerExcludedWalletIds: t\n      } = y.state;\n      if (e === \"NONE\" || t === \"ALL\" && !e) return d.recomendedWallets;\n      if (a.isArray(e)) {\n        const s = {\n            recommendedIds: e.join(\",\")\n          },\n          {\n            listings: n\n          } = await m.getAllListings(s),\n          i = Object.values(n);\n        i.sort((l, v) => {\n          const b = e.indexOf(l.id),\n            f = e.indexOf(v.id);\n          return b - f;\n        }), d.recomendedWallets = i;\n      } else {\n        const {\n            chains: s,\n            isAuth: n\n          } = p.state,\n          i = s === null || s === void 0 ? void 0 : s.join(\",\"),\n          l = a.isArray(t),\n          v = {\n            page: 1,\n            sdks: n ? \"auth_v1\" : void 0,\n            entries: a.RECOMMENDED_WALLET_AMOUNT,\n            chains: i,\n            version: 2,\n            excludedIds: l ? t.join(\",\") : void 0\n          },\n          {\n            listings: b\n          } = N ? await m.getMobileListings(v) : await m.getDesktopListings(v);\n        d.recomendedWallets = Object.values(b);\n      }\n      return d.recomendedWallets;\n    },\n    async getWallets(e) {\n      const t = F({}, e),\n        {\n          explorerRecommendedWalletIds: s,\n          explorerExcludedWalletIds: n\n        } = y.state,\n        {\n          recomendedWallets: i\n        } = d;\n      if (n === \"ALL\") return d.wallets;\n      i.length ? t.excludedIds = i.map(x => x.id).join(\",\") : a.isArray(s) && (t.excludedIds = s.join(\",\")), a.isArray(n) && (t.excludedIds = [t.excludedIds, n].filter(Boolean).join(\",\")), p.state.isAuth && (t.sdks = \"auth_v1\");\n      const {\n          page: l,\n          search: v\n        } = e,\n        {\n          listings: b,\n          total: f\n        } = N ? await m.getMobileListings(t) : await m.getDesktopListings(t),\n        A = Object.values(b),\n        U = v ? \"search\" : \"wallets\";\n      return d[U] = {\n        listings: [...d[U].listings, ...A],\n        total: f,\n        page: l !== null && l !== void 0 ? l : 1\n      }, {\n        listings: A,\n        total: f\n      };\n    },\n    getWalletImageUrl(e) {\n      return m.getWalletImageUrl(e);\n    },\n    getAssetImageUrl(e) {\n      return m.getAssetImageUrl(e);\n    },\n    resetSearch() {\n      d.search = {\n        listings: [],\n        total: 0,\n        page: 1\n      };\n    }\n  },\n  I = Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"proxy\"])({\n    open: !1\n  }),\n  se = {\n    state: I,\n    subscribe(e) {\n      return Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"subscribe\"])(I, () => e(I));\n    },\n    async open(e) {\n      return new Promise(t => {\n        const {\n          isUiLoaded: s,\n          isDataLoaded: n\n        } = p.state;\n        if (a.removeWalletConnectDeepLink(), p.setWalletConnectUri(e === null || e === void 0 ? void 0 : e.uri), p.setChains(e === null || e === void 0 ? void 0 : e.chains), T.reset(\"ConnectWallet\"), s && n) I.open = !0, t();else {\n          const i = setInterval(() => {\n            const l = p.state;\n            l.isUiLoaded && l.isDataLoaded && (clearInterval(i), I.open = !0, t());\n          }, 200);\n        }\n      });\n    },\n    close() {\n      I.open = !1;\n    }\n  };\nvar G = Object.defineProperty,\n  $ = Object.getOwnPropertySymbols,\n  Q = Object.prototype.hasOwnProperty,\n  X = Object.prototype.propertyIsEnumerable,\n  S = (e, t, s) => t in e ? G(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: s\n  }) : e[t] = s,\n  Y = (e, t) => {\n    for (var s in t || (t = {})) Q.call(t, s) && S(e, s, t[s]);\n    if ($) for (var s of $(t)) X.call(t, s) && S(e, s, t[s]);\n    return e;\n  };\nfunction Z() {\n  return typeof matchMedia < \"u\" && matchMedia(\"(prefers-color-scheme: dark)\").matches;\n}\nconst C = Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"proxy\"])({\n    themeMode: Z() ? \"dark\" : \"light\"\n  }),\n  ne = {\n    state: C,\n    subscribe(e) {\n      return Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"subscribe\"])(C, () => e(C));\n    },\n    setThemeConfig(e) {\n      const {\n        themeMode: t,\n        themeVariables: s\n      } = e;\n      t && (C.themeMode = t), s && (C.themeVariables = Y({}, s));\n    }\n  },\n  g = Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"proxy\"])({\n    open: !1,\n    message: \"\",\n    variant: \"success\"\n  }),\n  oe = {\n    state: g,\n    subscribe(e) {\n      return Object(valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__[\"subscribe\"])(g, () => e(g));\n    },\n    openToast(e, t) {\n      g.open = !0, g.message = e, g.variant = t;\n    },\n    closeToast() {\n      g.open = !1;\n    }\n  };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/modal-core/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@walletconnect/modal/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@walletconnect/modal/dist/index.js ***!
  \*********************************************************/
/*! exports provided: WalletConnectModal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WalletConnectModal\", function() { return d; });\n/* harmony import */ var _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/modal-core */ \"./node_modules/@walletconnect/modal-core/dist/index.js\");\n\nclass d {\n  constructor(e) {\n    this.openModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__[\"ModalCtrl\"].open, this.closeModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__[\"ModalCtrl\"].close, this.subscribeModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__[\"ModalCtrl\"].subscribe, this.setTheme = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__[\"ThemeCtrl\"].setThemeConfig, _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__[\"ThemeCtrl\"].setThemeConfig(e), _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__[\"ConfigCtrl\"].setConfig(e), this.initUi();\n  }\n  async initUi() {\n    if (typeof window < \"u\") {\n      await Promise.all(/*! import() */[__webpack_require__.e(12), __webpack_require__.e(29)]).then(__webpack_require__.bind(null, /*! @walletconnect/modal-ui */ \"./node_modules/@walletconnect/modal-ui/dist/index.js\"));\n      const e = document.createElement(\"wcm-modal\");\n      document.body.insertAdjacentElement(\"beforeend\", e), _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__[\"OptionsCtrl\"].setIsUiLoaded(!0);\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NsaWVudC50cz8xZmIxIl0sIm5hbWVzIjpbImQiLCJjb25zdHJ1Y3RvciIsImUiLCJvcGVuTW9kYWwiLCJ0Iiwib3BlbiIsImNsb3NlTW9kYWwiLCJjbG9zZSIsInN1YnNjcmliZU1vZGFsIiwic3Vic2NyaWJlIiwic2V0VGhlbWUiLCJvIiwic2V0VGhlbWVDb25maWciLCJpIiwic2V0Q29uZmlnIiwiaW5pdFVpIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImluc2VydEFkamFjZW50RWxlbWVudCIsIm4iLCJzZXRJc1VpTG9hZGVkIl0sIm1hcHBpbmdzIjoiOzs7O0FBV2EsTUFBQUEsQ0FBbUI7RUFDdkJDLFlBQVlDLENBQUEsRUFBa0M7SUFlckQsS0FBT0MsU0FBQSxHQUFZQyxtRUFBQSxDQUFVQyxJQUFBLEVBRTdCLEtBQU9DLFVBQUEsR0FBYUYsbUVBQUEsQ0FBVUcsS0FBQSxFQUU5QixLQUFPQyxjQUFBLEdBQWlCSixtRUFBQSxDQUFVSyxTQUFBLEVBRWxDLEtBQU9DLFFBQUEsR0FBV0MsbUVBQUEsQ0FBVUMsY0FBQSxFQXBCMUJELG1FQUFBLENBQVVDLGNBQUEsQ0FBZVYsQ0FBTSxHQUMvQlcsb0VBQUEsQ0FBV0MsU0FBQSxDQUFVWixDQUFNLEdBQzNCLEtBQUthLE1BQUEsRUFDUDtFQUFBO0VBRUEsTUFBY0EsT0FBQSxFQUFTO0lBQ3JCLElBQUksT0FBT0MsTUFBQSxHQUFXLEtBQWE7TUFDakMsTUFBYSw4TUFBMEI7TUFDdkMsTUFBTWQsQ0FBQSxHQUFRZSxRQUFBLENBQVNDLGFBQUEsQ0FBYyxXQUFXO01BQ2hERCxRQUFBLENBQVNFLElBQUEsQ0FBS0MscUJBQUEsQ0FBc0IsYUFBYWxCLENBQUssR0FDdERtQixxRUFBQSxDQUFZQyxhQUFBLENBQWMsRUFBSTtJQUFBO0VBRWxDO0FBU0YiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbW9kYWwvZGlzdC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ29uZmlnQ3RybFN0YXRlLCBUaGVtZUN0cmxTdGF0ZSB9IGZyb20gJ0B3YWxsZXRjb25uZWN0L21vZGFsLWNvcmUnXG5pbXBvcnQgeyBDb25maWdDdHJsLCBNb2RhbEN0cmwsIE9wdGlvbnNDdHJsLCBUaGVtZUN0cmwgfSBmcm9tICdAd2FsbGV0Y29ubmVjdC9tb2RhbC1jb3JlJ1xuXG4vKipcbiAqIFR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIFdhbGxldENvbm5lY3RNb2RhbENvbmZpZyA9IENvbmZpZ0N0cmxTdGF0ZSAmIFRoZW1lQ3RybFN0YXRlXG5cbi8qKlxuICogQ2xpZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBXYWxsZXRDb25uZWN0TW9kYWwge1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29uZmlnOiBXYWxsZXRDb25uZWN0TW9kYWxDb25maWcpIHtcbiAgICBUaGVtZUN0cmwuc2V0VGhlbWVDb25maWcoY29uZmlnKVxuICAgIENvbmZpZ0N0cmwuc2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLmluaXRVaSgpXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGluaXRVaSgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGF3YWl0IGltcG9ydCgnQHdhbGxldGNvbm5lY3QvbW9kYWwtdWknKVxuICAgICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd3Y20tbW9kYWwnKVxuICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWVuZCcsIG1vZGFsKVxuICAgICAgT3B0aW9uc0N0cmwuc2V0SXNVaUxvYWRlZCh0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvcGVuTW9kYWwgPSBNb2RhbEN0cmwub3BlblxuXG4gIHB1YmxpYyBjbG9zZU1vZGFsID0gTW9kYWxDdHJsLmNsb3NlXG5cbiAgcHVibGljIHN1YnNjcmliZU1vZGFsID0gTW9kYWxDdHJsLnN1YnNjcmliZVxuXG4gIHB1YmxpYyBzZXRUaGVtZSA9IFRoZW1lQ3RybC5zZXRUaGVtZUNvbmZpZ1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/modal/dist/index.js\n");

/***/ }),

/***/ "./node_modules/valtio/vanilla.js":
/*!****************************************!*\
  !*** ./node_modules/valtio/vanilla.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar proxyCompare = __webpack_require__(/*! proxy-compare */ \"./node_modules/proxy-compare/dist/index.modern.js\");\n\nvar isObject = function isObject(x) {\n  return typeof x === 'object' && x !== null;\n};\nvar proxyStateMap = new WeakMap();\nvar refSet = new WeakSet();\nvar buildProxyFunction = function buildProxyFunction(objectIs, newProxy, canProxy, defaultHandlePromise, snapCache, createSnapshot, proxyCache, versionHolder, _proxyFunction) {\n  if (objectIs === void 0) {\n    objectIs = Object.is;\n  }\n  if (newProxy === void 0) {\n    newProxy = function newProxy(target, handler) {\n      return new Proxy(target, handler);\n    };\n  }\n  if (canProxy === void 0) {\n    canProxy = function canProxy(x) {\n      return isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer);\n    };\n  }\n  if (defaultHandlePromise === void 0) {\n    defaultHandlePromise = function defaultHandlePromise(promise) {\n      switch (promise.status) {\n        case 'fulfilled':\n          return promise.value;\n        case 'rejected':\n          throw promise.reason;\n        default:\n          throw promise;\n      }\n    };\n  }\n  if (snapCache === void 0) {\n    snapCache = new WeakMap();\n  }\n  if (createSnapshot === void 0) {\n    createSnapshot = function (_createSnapshot) {\n      function createSnapshot(_x, _x2, _x3) {\n        return _createSnapshot.apply(this, arguments);\n      }\n      createSnapshot.toString = function () {\n        return _createSnapshot.toString();\n      };\n      return createSnapshot;\n    }(function (target, version, handlePromise) {\n      if (handlePromise === void 0) {\n        handlePromise = defaultHandlePromise;\n      }\n      var cache = snapCache.get(target);\n      if ((cache == null ? void 0 : cache[0]) === version) {\n        return cache[1];\n      }\n      var snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n      proxyCompare.markToTrack(snap, true);\n      snapCache.set(target, [version, snap]);\n      Reflect.ownKeys(target).forEach(function (key) {\n        if (Object.getOwnPropertyDescriptor(snap, key)) {\n          return;\n        }\n        var value = Reflect.get(target, key);\n        var desc = {\n          value: value,\n          enumerable: true,\n          configurable: true\n        };\n        if (refSet.has(value)) {\n          proxyCompare.markToTrack(value, false);\n        } else if (value instanceof Promise) {\n          delete desc.value;\n          desc.get = function () {\n            return handlePromise(value);\n          };\n        } else if (proxyStateMap.has(value)) {\n          var _ref = proxyStateMap.get(value),\n            _target = _ref[0],\n            _ensureVersion = _ref[1];\n          desc.value = createSnapshot(_target, _ensureVersion(), handlePromise);\n        }\n        Object.defineProperty(snap, key, desc);\n      });\n      return Object.preventExtensions(snap);\n    });\n  }\n  if (proxyCache === void 0) {\n    proxyCache = new WeakMap();\n  }\n  if (versionHolder === void 0) {\n    versionHolder = [1, 1];\n  }\n  if (_proxyFunction === void 0) {\n    _proxyFunction = function proxyFunction(initialObject) {\n      if (!isObject(initialObject)) {\n        throw new Error('object required');\n      }\n      var found = proxyCache.get(initialObject);\n      if (found) {\n        return found;\n      }\n      var version = versionHolder[0];\n      var listeners = new Set();\n      var notifyUpdate = function notifyUpdate(op, nextVersion) {\n        if (nextVersion === void 0) {\n          nextVersion = ++versionHolder[0];\n        }\n        if (version !== nextVersion) {\n          version = nextVersion;\n          listeners.forEach(function (listener) {\n            return listener(op, nextVersion);\n          });\n        }\n      };\n      var checkVersion = versionHolder[1];\n      var ensureVersion = function ensureVersion(nextCheckVersion) {\n        if (nextCheckVersion === void 0) {\n          nextCheckVersion = ++versionHolder[1];\n        }\n        if (checkVersion !== nextCheckVersion && !listeners.size) {\n          checkVersion = nextCheckVersion;\n          propProxyStates.forEach(function (_ref2) {\n            var propProxyState = _ref2[0];\n            var propVersion = propProxyState[1](nextCheckVersion);\n            if (propVersion > version) {\n              version = propVersion;\n            }\n          });\n        }\n        return version;\n      };\n      var createPropListener = function createPropListener(prop) {\n        return function (op, nextVersion) {\n          var newOp = [].concat(op);\n          newOp[1] = [prop].concat(newOp[1]);\n          notifyUpdate(newOp, nextVersion);\n        };\n      };\n      var propProxyStates = new Map();\n      var addPropListener = function addPropListener(prop, propProxyState) {\n        if ( true && propProxyStates.has(prop)) {\n          throw new Error('prop listener already exists');\n        }\n        if (listeners.size) {\n          var remove = propProxyState[3](createPropListener(prop));\n          propProxyStates.set(prop, [propProxyState, remove]);\n        } else {\n          propProxyStates.set(prop, [propProxyState]);\n        }\n      };\n      var removePropListener = function removePropListener(prop) {\n        var entry = propProxyStates.get(prop);\n        if (entry) {\n          var _entry$;\n          propProxyStates.delete(prop);\n          (_entry$ = entry[1]) == null ? void 0 : _entry$.call(entry);\n        }\n      };\n      var addListener = function addListener(listener) {\n        listeners.add(listener);\n        if (listeners.size === 1) {\n          propProxyStates.forEach(function (_ref3, prop) {\n            var propProxyState = _ref3[0],\n              prevRemove = _ref3[1];\n            if ( true && prevRemove) {\n              throw new Error('remove already exists');\n            }\n            var remove = propProxyState[3](createPropListener(prop));\n            propProxyStates.set(prop, [propProxyState, remove]);\n          });\n        }\n        var removeListener = function removeListener() {\n          listeners.delete(listener);\n          if (listeners.size === 0) {\n            propProxyStates.forEach(function (_ref4, prop) {\n              var propProxyState = _ref4[0],\n                remove = _ref4[1];\n              if (remove) {\n                remove();\n                propProxyStates.set(prop, [propProxyState]);\n              }\n            });\n          }\n        };\n        return removeListener;\n      };\n      var baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n      var handler = {\n        deleteProperty: function deleteProperty(target, prop) {\n          var prevValue = Reflect.get(target, prop);\n          removePropListener(prop);\n          var deleted = Reflect.deleteProperty(target, prop);\n          if (deleted) {\n            notifyUpdate(['delete', [prop], prevValue]);\n          }\n          return deleted;\n        },\n        set: function set(target, prop, value, receiver) {\n          var hasPrevValue = Reflect.has(target, prop);\n          var prevValue = Reflect.get(target, prop, receiver);\n          if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {\n            return true;\n          }\n          removePropListener(prop);\n          if (isObject(value)) {\n            value = proxyCompare.getUntracked(value) || value;\n          }\n          var nextValue = value;\n          if (value instanceof Promise) {\n            value.then(function (v) {\n              value.status = 'fulfilled';\n              value.value = v;\n              notifyUpdate(['resolve', [prop], v]);\n            }).catch(function (e) {\n              value.status = 'rejected';\n              value.reason = e;\n              notifyUpdate(['reject', [prop], e]);\n            });\n          } else {\n            if (!proxyStateMap.has(value) && canProxy(value)) {\n              nextValue = _proxyFunction(value);\n            }\n            var childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);\n            if (childProxyState) {\n              addPropListener(prop, childProxyState);\n            }\n          }\n          Reflect.set(target, prop, nextValue, receiver);\n          notifyUpdate(['set', [prop], value, prevValue]);\n          return true;\n        }\n      };\n      var proxyObject = newProxy(baseObject, handler);\n      proxyCache.set(initialObject, proxyObject);\n      var proxyState = [baseObject, ensureVersion, createSnapshot, addListener];\n      proxyStateMap.set(proxyObject, proxyState);\n      Reflect.ownKeys(initialObject).forEach(function (key) {\n        var desc = Object.getOwnPropertyDescriptor(initialObject, key);\n        if ('value' in desc) {\n          proxyObject[key] = initialObject[key];\n          delete desc.value;\n          delete desc.writable;\n        }\n        Object.defineProperty(baseObject, key, desc);\n      });\n      return proxyObject;\n    };\n  }\n  return [_proxyFunction, proxyStateMap, refSet, objectIs, newProxy, canProxy, defaultHandlePromise, snapCache, createSnapshot, proxyCache, versionHolder];\n};\nvar _buildProxyFunction = buildProxyFunction(),\n  defaultProxyFunction = _buildProxyFunction[0];\nfunction proxy(initialObject) {\n  if (initialObject === void 0) {\n    initialObject = {};\n  }\n  return defaultProxyFunction(initialObject);\n}\nfunction getVersion(proxyObject) {\n  var proxyState = proxyStateMap.get(proxyObject);\n  return proxyState == null ? void 0 : proxyState[1]();\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n  var proxyState = proxyStateMap.get(proxyObject);\n  if ( true && !proxyState) {\n    console.warn('Please use proxy object');\n  }\n  var promise;\n  var ops = [];\n  var addListener = proxyState[3];\n  var isListenerActive = false;\n  var listener = function listener(op) {\n    ops.push(op);\n    if (notifyInSync) {\n      callback(ops.splice(0));\n      return;\n    }\n    if (!promise) {\n      promise = Promise.resolve().then(function () {\n        promise = undefined;\n        if (isListenerActive) {\n          callback(ops.splice(0));\n        }\n      });\n    }\n  };\n  var removeListener = addListener(listener);\n  isListenerActive = true;\n  return function () {\n    isListenerActive = false;\n    removeListener();\n  };\n}\nfunction snapshot(proxyObject, handlePromise) {\n  var proxyState = proxyStateMap.get(proxyObject);\n  if ( true && !proxyState) {\n    console.warn('Please use proxy object');\n  }\n  var _ref5 = proxyState,\n    target = _ref5[0],\n    ensureVersion = _ref5[1],\n    createSnapshot = _ref5[2];\n  return createSnapshot(target, ensureVersion(), handlePromise);\n}\nfunction ref(obj) {\n  refSet.add(obj);\n  return obj;\n}\nvar unstable_buildProxyFunction = buildProxyFunction;\n\nexports.getVersion = getVersion;\nexports.proxy = proxy;\nexports.ref = ref;\nexports.snapshot = snapshot;\nexports.subscribe = subscribe;\nexports.unstable_buildProxyFunction = unstable_buildProxyFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/valtio/vanilla.js\n");

/***/ })

}]);